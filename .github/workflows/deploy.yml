name: CI/CD Terminal Chat

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEPLOY_PATH: /opt/terminal-chat
  SERVICE_NAME: terminal-chat

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Test server syntax
      run: |
        python -m py_compile server.py
        python -m py_compile client.py
        python -m py_compile server_production.py
    
    - name: Run tests
      run: |
        python test_chat.py

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: secrets.DOCKER_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      if: secrets.DOCKER_USERNAME != ''
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/terminal-chat:latest
          ${{ secrets.DOCKER_USERNAME }}/terminal-chat:${{ github.sha }}

  deploy-systemd:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.SERVER_IP != ''
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Server (Systemd)
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
          if [ -d "${{ env.DEPLOY_PATH }}" ]; then
            sudo cp -r ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S)
            echo "‚úÖ Backup created"
          fi
          
          # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          sudo mkdir -p ${{ env.DEPLOY_PATH }}
          
          # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥
          if [ -d "${{ env.DEPLOY_PATH }}/.git" ]; then
            cd ${{ env.DEPLOY_PATH }}
            sudo git fetch origin
            sudo git reset --hard origin/main
          else
            sudo git clone https://github.com/${{ github.repository }}.git ${{ env.DEPLOY_PATH }} || true
            cd ${{ env.DEPLOY_PATH }}
          fi
          
          echo "‚úÖ Code updated"
          
          # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
          sudo systemctl stop ${{ env.SERVICE_NAME }} || echo "Service not running"
          
          # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ ! -f "${{ env.DEPLOY_PATH }}/config.py" ]; then
            sudo cp config_example.py config.py
            echo "‚úÖ Config created from example"
          fi
          
          if [ ! -f "${{ env.DEPLOY_PATH }}/.env" ]; then
            sudo cp .env.example .env 2>/dev/null || true
            echo "‚úÖ Environment file created"
          fi
          
          # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if ! id chatuser >/dev/null 2>&1; then
            sudo useradd --system --home-dir ${{ env.DEPLOY_PATH }} --shell /bin/false chatuser
            echo "‚úÖ User chatuser created"
          fi
          
          # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞
          sudo chown -R chatuser:chatuser ${{ env.DEPLOY_PATH }}
          sudo chmod 755 ${{ env.DEPLOY_PATH }}
          sudo chmod 644 ${{ env.DEPLOY_PATH }}/*.py
          sudo chmod 600 ${{ env.DEPLOY_PATH }}/.env 2>/dev/null || true
          
          # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å
          sudo cp terminal-chat.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable ${{ env.SERVICE_NAME }}
          
          # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
          sudo systemctl start ${{ env.SERVICE_NAME }}
          
          echo "‚úÖ Service started"
          
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          sleep 3
          if sudo systemctl is-active --quiet ${{ env.SERVICE_NAME }}; then
            echo "‚úÖ Service is running"
            sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager -l
          else
            echo "‚ùå Service failed to start"
            sudo journalctl -u ${{ env.SERVICE_NAME }} --no-pager -n 20
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç
          if sudo netstat -tulpn | grep -q :12345; then
            echo "‚úÖ Port 12345 is open"
          else
            echo "‚ö†Ô∏è Port 12345 not found"
          fi
          
          echo "üéâ Deployment completed successfully!"

  deploy-docker:
    needs: [test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.DOCKER_DEPLOY == 'true'
    
    steps:
    - name: Deploy with Docker
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          
          echo "üê≥ Starting Docker deployment..."
          
          # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker stop terminal-chat-server 2>/dev/null || true
          docker rm terminal-chat-server 2>/dev/null || true
          
          # –û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑
          docker pull ${{ secrets.DOCKER_USERNAME }}/terminal-chat:latest
          
          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker run -d \
            --name terminal-chat-server \
            --restart unless-stopped \
            -p 12345:12345 \
            -v chat_data:/app/data \
            ${{ secrets.DOCKER_USERNAME }}/terminal-chat:latest
          
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          sleep 3
          if docker ps | grep -q terminal-chat-server; then
            echo "‚úÖ Docker container is running"
            docker ps | grep terminal-chat-server
          else
            echo "‚ùå Docker container failed to start"
            docker logs terminal-chat-server
            exit 1
          fi
          
          echo "üéâ Docker deployment completed!"

  notify:
    needs: [deploy-systemd, deploy-docker]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Success
      if: needs.deploy-systemd.result == 'success' || needs.deploy-docker.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Server: ${{ secrets.SERVER_IP }}"
    
    - name: Notify Failure
      if: needs.deploy-systemd.result == 'failure' || needs.deploy-docker.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details"
