#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket
import threading
import json
import datetime
import hashlib
import os
import uuid
from typing import Dict, List, Optional

class ChatRoom:
    def __init__(self, room_id: str, name: str, admin: str, password: str = None):
        self.room_id = room_id
        self.name = name
        self.admin = admin
        self.password = password
        self.users: Dict[str, dict] = {}  # username: {socket, address}
        self.messages: List[dict] = []
        self.created_at = datetime.datetime.now().isoformat()
        
    def add_user(self, username: str, user_socket, address):
        self.users[username] = {'socket': user_socket, 'address': address}
        
    def remove_user(self, username: str):
        if username in self.users:
            del self.users[username]
            
    def broadcast_message(self, message: str, sender: str = None):
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.messages.append({
            'timestamp': timestamp,
            'sender': sender,
            'message': message,
            'date': datetime.datetime.now().isoformat()
        })
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        disconnected_users = []
        for username, user_info in self.users.items():
            try:
                user_info['socket'].send(formatted_message.encode('utf-8'))
            except:
                disconnected_users.append(username)
                
        # –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for username in disconnected_users:
            self.remove_user(username)
            
    def to_dict(self):
        return {
            'room_id': self.room_id,
            'name': self.name,
            'admin': self.admin,
            'password': self.password,
            'messages': self.messages,
            'created_at': self.created_at,
            'user_count': len(self.users)
        }

class ChatServer:
    def __init__(self, host='0.0.0.0', port=12345):
        self.host = host
        self.port = port
        self.rooms: Dict[str, ChatRoom] = {}
        self.user_rooms: Dict[str, str] = {}  # username: room_id
        self.user_sockets: Dict[str, socket.socket] = {}  # username: socket
        self.socket_users: Dict[socket.socket, str] = {}  # socket: username
        self.data_file = 'chat_data.json'
        self.load_data()
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for room_data in data.get('rooms', []):
                        room = ChatRoom(
                            room_data['room_id'],
                            room_data['name'],
                            room_data['admin'],
                            room_data.get('password')
                        )
                        room.messages = room_data.get('messages', [])
                        room.created_at = room_data.get('created_at', datetime.datetime.now().isoformat())
                        self.rooms[room.room_id] = room
                print(f"[SERVER] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.rooms)} –∫–æ–º–Ω–∞—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"[SERVER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤"""
        try:
            data = {
                'rooms': [room.to_dict() for room in self.rooms.values()],
                'last_updated': datetime.datetime.now().isoformat()
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"[SERVER] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def create_room(self, room_name: str, admin: str, password: str = None) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
        room_id = str(uuid.uuid4())[:8]
        room = ChatRoom(room_id, room_name, admin, password)
        self.rooms[room_id] = room
        self.save_data()
        return room_id
        
    def join_room(self, username: str, room_id: str, password: str = None) -> bool:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        if room_id not in self.rooms:
            return False
            
        room = self.rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if room.password and room.password != password:
            return False
            
        # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
        if username in self.user_rooms:
            old_room_id = self.user_rooms[username]
            if old_room_id in self.rooms:
                self.rooms[old_room_id].remove_user(username)
                self.rooms[old_room_id].broadcast_message(f"{username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É", "SYSTEM")
                
        # –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
        user_socket = self.user_sockets[username]
        room.add_user(username, user_socket, None)
        self.user_rooms[username] = room_id
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        user_socket.send(f"\n=== –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É '{room.name}' (ID: {room_id}) ===".encode('utf-8'))
        user_socket.send(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {room.admin}".encode('utf-8'))
        user_socket.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ: {len(room.users)}".encode('utf-8'))
        
        if room.messages:
            user_socket.send("=== –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ===".encode('utf-8'))
            for msg in room.messages[-10:]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if msg.get('sender'):
                    user_socket.send(f"[{msg['timestamp']}] {msg['sender']}: {msg['message']}".encode('utf-8'))
                else:
                    user_socket.send(f"[{msg['timestamp']}] {msg['message']}".encode('utf-8'))
        
        user_socket.send("=== –ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ ===\n".encode('utf-8'))
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        room.broadcast_message(f"{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ", "SYSTEM")
        
        return True
        
    def leave_room(self, username: str):
        """–ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É"""
        if username in self.user_rooms:
            room_id = self.user_rooms[username]
            if room_id in self.rooms:
                room = self.rooms[room_id]
                room.remove_user(username)
                room.broadcast_message(f"{username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É", "SYSTEM")
                del self.user_rooms[username]
                
    def get_room_list(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç"""
        room_list = []
        for room in self.rooms.values():
            room_info = {
                'id': room.room_id,
                'name': room.name,
                'admin': room.admin,
                'users': len(room.users),
                'protected': bool(room.password),
                'created': room.created_at
            }
            room_list.append(room_info)
        return room_list
        
    def handle_command(self, username: str, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parts = command.strip().split()
        cmd = parts[0].lower()
        
        if cmd == '/help':
            return """
=== –ö–û–ú–ê–ù–î–´ –ß–ê–¢–ê ===
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
/create <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø–∞—Ä–æ–ª—å] - —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
/join <ID> [–ø–∞—Ä–æ–ª—å] - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
/leave - –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
/kick <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> - –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
/password <–Ω–æ–≤—ã–π_–ø–∞—Ä–æ–ª—å> - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
/exit - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞
"""
        
        elif cmd == '/list':
            rooms = self.get_room_list()
            if not rooms:
                return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç."
            
            result = "\n=== –°–ü–ò–°–û–ö –ö–û–ú–ù–ê–¢ ===\n"
            for room in rooms:
                lock_icon = "üîí" if room['protected'] else "üîì"
                result += f"{lock_icon} {room['id']}: {room['name']} (–ê–¥–º–∏–Ω: {room['admin']}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {room['users']})\n"
            return result
            
        elif cmd == '/create':
            if len(parts) < 2:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø–∞—Ä–æ–ª—å]"
            
            room_name = parts[1]
            password = parts[2] if len(parts) > 2 else None
            room_id = self.create_room(room_name, username, password)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
            self.join_room(username, room_id, password)
            return f"–ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —Å–æ–∑–¥–∞–Ω–∞! ID: {room_id}"
            
        elif cmd == '/join':
            if len(parts) < 2:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <ID> [–ø–∞—Ä–æ–ª—å]"
            
            room_id = parts[1]
            password = parts[2] if len(parts) > 2 else None
            
            if self.join_room(username, room_id, password):
                return f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}"
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–∞—Ä–æ–ª—å."
                
        elif cmd == '/leave':
            if username in self.user_rooms:
                self.leave_room(username)
                return "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É."
            else:
                return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ."
                
        elif cmd == '/users':
            if username in self.user_rooms:
                room_id = self.user_rooms[username]
                room = self.rooms[room_id]
                users_list = list(room.users.keys())
                return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ: {', '.join(users_list)}"
            else:
                return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ."
                
        elif cmd == '/info':
            if username in self.user_rooms:
                room_id = self.user_rooms[username]
                room = self.rooms[room_id]
                lock_status = "–î–∞" if room.password else "–ù–µ—Ç"
                return f"""
=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ù–ê–¢–ï ===
–ù–∞–∑–≤–∞–Ω–∏–µ: {room.name}
ID: {room.room_id}
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {room.admin}
–ó–∞—â–∏—â–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–º: {lock_status}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(room.users)}
–°–æ–∑–¥–∞–Ω–∞: {room.created_at}
"""
            else:
                return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ."
                
        elif cmd == '/kick':
            if len(parts) < 2:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kick <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>"
            
            target_user = parts[1]
            if username in self.user_rooms:
                room_id = self.user_rooms[username]
                room = self.rooms[room_id]
                
                if room.admin != username:
                    return "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–≥–æ–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                
                if target_user in room.users:
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–≥–æ–Ω—è–µ–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    target_socket = room.users[target_user]['socket']
                    target_socket.send(f"–í—ã –±—ã–ª–∏ –≤—ã–≥–Ω–∞–Ω—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {username}".encode('utf-8'))
                    
                    # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    room.remove_user(target_user)
                    if target_user in self.user_rooms:
                        del self.user_rooms[target_user]
                    
                    room.broadcast_message(f"{target_user} –±—ã–ª –≤—ã–≥–Ω–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", "SYSTEM")
                    return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user} –≤—ã–≥–Ω–∞–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã."
                else:
                    return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ."
            else:
                return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ."
                
        elif cmd == '/password':
            if len(parts) < 2:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /password <–Ω–æ–≤—ã–π_–ø–∞—Ä–æ–ª—å>"
            
            new_password = parts[1]
            if username in self.user_rooms:
                room_id = self.user_rooms[username]
                room = self.rooms[room_id]
                
                if room.admin != username:
                    return "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å."
                
                room.password = new_password
                self.save_data()
                return f"–ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_password}"
            else:
                return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ."
        
        else:
            return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            
    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        username = None
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            welcome_msg = client_socket.recv(1024).decode('utf-8')
            if "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É" in welcome_msg:
                username = welcome_msg.split(" –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É")[0]
                self.user_sockets[username] = client_socket
                self.socket_users[client_socket] = username
                
                print(f"[SERVER] {username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å {address}")
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø—Ä–∞–≤–∫—É
                client_socket.send("=== –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ß–ê–¢ ===".encode('utf-8'))
                client_socket.send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥".encode('utf-8'))
                client_socket.send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç".encode('utf-8'))
                client_socket.send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create <–Ω–∞–∑–≤–∞–Ω–∏–µ> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã".encode('utf-8'))
                
                while True:
                    message = client_socket.recv(1024).decode('utf-8')
                    if not message:
                        break
                        
                    if message.startswith('/'):
                        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                        response = self.handle_command(username, message)
                        client_socket.send(response.encode('utf-8'))
                    else:
                        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
                        if username in self.user_rooms:
                            room_id = self.user_rooms[username]
                            if room_id in self.rooms:
                                room = self.rooms[room_id]
                                # –ò–∑–≤–ª–µ—á—å –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                if ": " in message:
                                    sender, text = message.split(": ", 1)
                                    room.broadcast_message(f"{sender}: {text}", sender)
                                else:
                                    room.broadcast_message(message, username)
                        else:
                            client_socket.send("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join <ID> –∏–ª–∏ /create <–Ω–∞–∑–≤–∞–Ω–∏–µ>".encode('utf-8'))
                            
        except Exception as e:
            print(f"[SERVER] –û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {address}: {e}")
        finally:
            if username:
                print(f"[SERVER] {username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                self.leave_room(username)
                # –û—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏
                if username in self.user_sockets:
                    del self.user_sockets[username]
                if client_socket in self.socket_users:
                    del self.socket_users[client_socket]
            client_socket.close()
            
    def start_server(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        try:
            server.bind((self.host, self.port))
            server.listen(5)
            print(f"[SERVER] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            print(f"[SERVER] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: {len(self.rooms)}")
            
            while True:
                client_socket, address = server.accept()
                client_thread = threading.Thread(
                    target=self.handle_client,
                    args=(client_socket, address),
                    daemon=True
                )
                client_thread.start()
                
        except KeyboardInterrupt:
            print("\n[SERVER] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"[SERVER] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.save_data()
            server.close()

if __name__ == "__main__":
    import sys
    
    port = 12345
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞")
            sys.exit(1)
    
    server = ChatServer(port=port)
    server.start_server()
